// Code generated by MockGen. DO NOT EDIT.
// Source: api/pb/commits/commits.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	commits "gitbeam/api/pb/commits"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockGitBeamCommitsServiceClient is a mock of GitBeamCommitsServiceClient interface.
type MockGitBeamCommitsServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockGitBeamCommitsServiceClientMockRecorder
}

// MockGitBeamCommitsServiceClientMockRecorder is the mock recorder for MockGitBeamCommitsServiceClient.
type MockGitBeamCommitsServiceClientMockRecorder struct {
	mock *MockGitBeamCommitsServiceClient
}

// NewMockGitBeamCommitsServiceClient creates a new mock instance.
func NewMockGitBeamCommitsServiceClient(ctrl *gomock.Controller) *MockGitBeamCommitsServiceClient {
	mock := &MockGitBeamCommitsServiceClient{ctrl: ctrl}
	mock.recorder = &MockGitBeamCommitsServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitBeamCommitsServiceClient) EXPECT() *MockGitBeamCommitsServiceClientMockRecorder {
	return m.recorder
}

// GetCommitByOwnerAndSHA mocks base method.
func (m *MockGitBeamCommitsServiceClient) GetCommitByOwnerAndSHA(ctx context.Context, in *commits.CommitByOwnerAndShaParams, opts ...grpc.CallOption) (*commits.Commit, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCommitByOwnerAndSHA", varargs...)
	ret0, _ := ret[0].(*commits.Commit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommitByOwnerAndSHA indicates an expected call of GetCommitByOwnerAndSHA.
func (mr *MockGitBeamCommitsServiceClientMockRecorder) GetCommitByOwnerAndSHA(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommitByOwnerAndSHA", reflect.TypeOf((*MockGitBeamCommitsServiceClient)(nil).GetCommitByOwnerAndSHA), varargs...)
}

// HealthCheck mocks base method.
func (m *MockGitBeamCommitsServiceClient) HealthCheck(ctx context.Context, in *commits.Void, opts ...grpc.CallOption) (*commits.HealthCheckResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HealthCheck", varargs...)
	ret0, _ := ret[0].(*commits.HealthCheckResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HealthCheck indicates an expected call of HealthCheck.
func (mr *MockGitBeamCommitsServiceClientMockRecorder) HealthCheck(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockGitBeamCommitsServiceClient)(nil).HealthCheck), varargs...)
}

// ListCommits mocks base method.
func (m *MockGitBeamCommitsServiceClient) ListCommits(ctx context.Context, in *commits.CommitFilterParams, opts ...grpc.CallOption) (*commits.ListCommitResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCommits", varargs...)
	ret0, _ := ret[0].(*commits.ListCommitResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCommits indicates an expected call of ListCommits.
func (mr *MockGitBeamCommitsServiceClientMockRecorder) ListCommits(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCommits", reflect.TypeOf((*MockGitBeamCommitsServiceClient)(nil).ListCommits), varargs...)
}

// ListTopCommitAuthor mocks base method.
func (m *MockGitBeamCommitsServiceClient) ListTopCommitAuthor(ctx context.Context, in *commits.CommitFilterParams, opts ...grpc.CallOption) (*commits.ListTopCommitAuthorResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTopCommitAuthor", varargs...)
	ret0, _ := ret[0].(*commits.ListTopCommitAuthorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTopCommitAuthor indicates an expected call of ListTopCommitAuthor.
func (mr *MockGitBeamCommitsServiceClientMockRecorder) ListTopCommitAuthor(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTopCommitAuthor", reflect.TypeOf((*MockGitBeamCommitsServiceClient)(nil).ListTopCommitAuthor), varargs...)
}

// StartMonitoringRepositoryCommits mocks base method.
func (m *MockGitBeamCommitsServiceClient) StartMonitoringRepositoryCommits(ctx context.Context, in *commits.MonitorRepositoryCommitsConfigParams, opts ...grpc.CallOption) (*commits.Void, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartMonitoringRepositoryCommits", varargs...)
	ret0, _ := ret[0].(*commits.Void)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartMonitoringRepositoryCommits indicates an expected call of StartMonitoringRepositoryCommits.
func (mr *MockGitBeamCommitsServiceClientMockRecorder) StartMonitoringRepositoryCommits(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartMonitoringRepositoryCommits", reflect.TypeOf((*MockGitBeamCommitsServiceClient)(nil).StartMonitoringRepositoryCommits), varargs...)
}

// StopMonitoringRepositoryCommits mocks base method.
func (m *MockGitBeamCommitsServiceClient) StopMonitoringRepositoryCommits(ctx context.Context, in *commits.StopMonitoringRepositoryCommitParams, opts ...grpc.CallOption) (*commits.Void, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopMonitoringRepositoryCommits", varargs...)
	ret0, _ := ret[0].(*commits.Void)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopMonitoringRepositoryCommits indicates an expected call of StopMonitoringRepositoryCommits.
func (mr *MockGitBeamCommitsServiceClientMockRecorder) StopMonitoringRepositoryCommits(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopMonitoringRepositoryCommits", reflect.TypeOf((*MockGitBeamCommitsServiceClient)(nil).StopMonitoringRepositoryCommits), varargs...)
}

// MockGitBeamCommitsServiceServer is a mock of GitBeamCommitsServiceServer interface.
type MockGitBeamCommitsServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockGitBeamCommitsServiceServerMockRecorder
}

// MockGitBeamCommitsServiceServerMockRecorder is the mock recorder for MockGitBeamCommitsServiceServer.
type MockGitBeamCommitsServiceServerMockRecorder struct {
	mock *MockGitBeamCommitsServiceServer
}

// NewMockGitBeamCommitsServiceServer creates a new mock instance.
func NewMockGitBeamCommitsServiceServer(ctrl *gomock.Controller) *MockGitBeamCommitsServiceServer {
	mock := &MockGitBeamCommitsServiceServer{ctrl: ctrl}
	mock.recorder = &MockGitBeamCommitsServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitBeamCommitsServiceServer) EXPECT() *MockGitBeamCommitsServiceServerMockRecorder {
	return m.recorder
}

// GetCommitByOwnerAndSHA mocks base method.
func (m *MockGitBeamCommitsServiceServer) GetCommitByOwnerAndSHA(arg0 context.Context, arg1 *commits.CommitByOwnerAndShaParams) (*commits.Commit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommitByOwnerAndSHA", arg0, arg1)
	ret0, _ := ret[0].(*commits.Commit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommitByOwnerAndSHA indicates an expected call of GetCommitByOwnerAndSHA.
func (mr *MockGitBeamCommitsServiceServerMockRecorder) GetCommitByOwnerAndSHA(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommitByOwnerAndSHA", reflect.TypeOf((*MockGitBeamCommitsServiceServer)(nil).GetCommitByOwnerAndSHA), arg0, arg1)
}

// HealthCheck mocks base method.
func (m *MockGitBeamCommitsServiceServer) HealthCheck(arg0 context.Context, arg1 *commits.Void) (*commits.HealthCheckResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HealthCheck", arg0, arg1)
	ret0, _ := ret[0].(*commits.HealthCheckResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HealthCheck indicates an expected call of HealthCheck.
func (mr *MockGitBeamCommitsServiceServerMockRecorder) HealthCheck(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockGitBeamCommitsServiceServer)(nil).HealthCheck), arg0, arg1)
}

// ListCommits mocks base method.
func (m *MockGitBeamCommitsServiceServer) ListCommits(arg0 context.Context, arg1 *commits.CommitFilterParams) (*commits.ListCommitResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCommits", arg0, arg1)
	ret0, _ := ret[0].(*commits.ListCommitResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCommits indicates an expected call of ListCommits.
func (mr *MockGitBeamCommitsServiceServerMockRecorder) ListCommits(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCommits", reflect.TypeOf((*MockGitBeamCommitsServiceServer)(nil).ListCommits), arg0, arg1)
}

// ListTopCommitAuthor mocks base method.
func (m *MockGitBeamCommitsServiceServer) ListTopCommitAuthor(arg0 context.Context, arg1 *commits.CommitFilterParams) (*commits.ListTopCommitAuthorResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTopCommitAuthor", arg0, arg1)
	ret0, _ := ret[0].(*commits.ListTopCommitAuthorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTopCommitAuthor indicates an expected call of ListTopCommitAuthor.
func (mr *MockGitBeamCommitsServiceServerMockRecorder) ListTopCommitAuthor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTopCommitAuthor", reflect.TypeOf((*MockGitBeamCommitsServiceServer)(nil).ListTopCommitAuthor), arg0, arg1)
}

// StartMonitoringRepositoryCommits mocks base method.
func (m *MockGitBeamCommitsServiceServer) StartMonitoringRepositoryCommits(arg0 context.Context, arg1 *commits.MonitorRepositoryCommitsConfigParams) (*commits.Void, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartMonitoringRepositoryCommits", arg0, arg1)
	ret0, _ := ret[0].(*commits.Void)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartMonitoringRepositoryCommits indicates an expected call of StartMonitoringRepositoryCommits.
func (mr *MockGitBeamCommitsServiceServerMockRecorder) StartMonitoringRepositoryCommits(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartMonitoringRepositoryCommits", reflect.TypeOf((*MockGitBeamCommitsServiceServer)(nil).StartMonitoringRepositoryCommits), arg0, arg1)
}

// StopMonitoringRepositoryCommits mocks base method.
func (m *MockGitBeamCommitsServiceServer) StopMonitoringRepositoryCommits(arg0 context.Context, arg1 *commits.StopMonitoringRepositoryCommitParams) (*commits.Void, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopMonitoringRepositoryCommits", arg0, arg1)
	ret0, _ := ret[0].(*commits.Void)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopMonitoringRepositoryCommits indicates an expected call of StopMonitoringRepositoryCommits.
func (mr *MockGitBeamCommitsServiceServerMockRecorder) StopMonitoringRepositoryCommits(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopMonitoringRepositoryCommits", reflect.TypeOf((*MockGitBeamCommitsServiceServer)(nil).StopMonitoringRepositoryCommits), arg0, arg1)
}
