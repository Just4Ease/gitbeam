// Code generated by MockGen. DO NOT EDIT.
// Source: api/pb/repos/repos.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gitRepos "gitbeam/api/pb/repos"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockGitBeamRepositoryServiceClient is a mock of GitBeamRepositoryServiceClient interface.
type MockGitBeamRepositoryServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockGitBeamRepositoryServiceClientMockRecorder
}

// MockGitBeamRepositoryServiceClientMockRecorder is the mock recorder for MockGitBeamRepositoryServiceClient.
type MockGitBeamRepositoryServiceClientMockRecorder struct {
	mock *MockGitBeamRepositoryServiceClient
}

// NewMockGitBeamRepositoryServiceClient creates a new mock instance.
func NewMockGitBeamRepositoryServiceClient(ctrl *gomock.Controller) *MockGitBeamRepositoryServiceClient {
	mock := &MockGitBeamRepositoryServiceClient{ctrl: ctrl}
	mock.recorder = &MockGitBeamRepositoryServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitBeamRepositoryServiceClient) EXPECT() *MockGitBeamRepositoryServiceClientMockRecorder {
	return m.recorder
}

// GetGitRepo mocks base method.
func (m *MockGitBeamRepositoryServiceClient) GetGitRepo(ctx context.Context, in *gitRepos.GetGitRepoRequest, opts ...grpc.CallOption) (*gitRepos.Repo, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGitRepo", varargs...)
	ret0, _ := ret[0].(*gitRepos.Repo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGitRepo indicates an expected call of GetGitRepo.
func (mr *MockGitBeamRepositoryServiceClientMockRecorder) GetGitRepo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGitRepo", reflect.TypeOf((*MockGitBeamRepositoryServiceClient)(nil).GetGitRepo), varargs...)
}

// HealthCheck mocks base method.
func (m *MockGitBeamRepositoryServiceClient) HealthCheck(ctx context.Context, in *gitRepos.Void, opts ...grpc.CallOption) (*gitRepos.HealthCheckResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HealthCheck", varargs...)
	ret0, _ := ret[0].(*gitRepos.HealthCheckResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HealthCheck indicates an expected call of HealthCheck.
func (mr *MockGitBeamRepositoryServiceClientMockRecorder) HealthCheck(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockGitBeamRepositoryServiceClient)(nil).HealthCheck), varargs...)
}

// ListGitRepositories mocks base method.
func (m *MockGitBeamRepositoryServiceClient) ListGitRepositories(ctx context.Context, in *gitRepos.Void, opts ...grpc.CallOption) (*gitRepos.ListGitRepositoriesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGitRepositories", varargs...)
	ret0, _ := ret[0].(*gitRepos.ListGitRepositoriesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGitRepositories indicates an expected call of ListGitRepositories.
func (mr *MockGitBeamRepositoryServiceClientMockRecorder) ListGitRepositories(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGitRepositories", reflect.TypeOf((*MockGitBeamRepositoryServiceClient)(nil).ListGitRepositories), varargs...)
}

// MockGitBeamRepositoryServiceServer is a mock of GitBeamRepositoryServiceServer interface.
type MockGitBeamRepositoryServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockGitBeamRepositoryServiceServerMockRecorder
}

// MockGitBeamRepositoryServiceServerMockRecorder is the mock recorder for MockGitBeamRepositoryServiceServer.
type MockGitBeamRepositoryServiceServerMockRecorder struct {
	mock *MockGitBeamRepositoryServiceServer
}

// NewMockGitBeamRepositoryServiceServer creates a new mock instance.
func NewMockGitBeamRepositoryServiceServer(ctrl *gomock.Controller) *MockGitBeamRepositoryServiceServer {
	mock := &MockGitBeamRepositoryServiceServer{ctrl: ctrl}
	mock.recorder = &MockGitBeamRepositoryServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitBeamRepositoryServiceServer) EXPECT() *MockGitBeamRepositoryServiceServerMockRecorder {
	return m.recorder
}

// GetGitRepo mocks base method.
func (m *MockGitBeamRepositoryServiceServer) GetGitRepo(arg0 context.Context, arg1 *gitRepos.GetGitRepoRequest) (*gitRepos.Repo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGitRepo", arg0, arg1)
	ret0, _ := ret[0].(*gitRepos.Repo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGitRepo indicates an expected call of GetGitRepo.
func (mr *MockGitBeamRepositoryServiceServerMockRecorder) GetGitRepo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGitRepo", reflect.TypeOf((*MockGitBeamRepositoryServiceServer)(nil).GetGitRepo), arg0, arg1)
}

// HealthCheck mocks base method.
func (m *MockGitBeamRepositoryServiceServer) HealthCheck(arg0 context.Context, arg1 *gitRepos.Void) (*gitRepos.HealthCheckResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HealthCheck", arg0, arg1)
	ret0, _ := ret[0].(*gitRepos.HealthCheckResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HealthCheck indicates an expected call of HealthCheck.
func (mr *MockGitBeamRepositoryServiceServerMockRecorder) HealthCheck(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockGitBeamRepositoryServiceServer)(nil).HealthCheck), arg0, arg1)
}

// ListGitRepositories mocks base method.
func (m *MockGitBeamRepositoryServiceServer) ListGitRepositories(arg0 context.Context, arg1 *gitRepos.Void) (*gitRepos.ListGitRepositoriesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGitRepositories", arg0, arg1)
	ret0, _ := ret[0].(*gitRepos.ListGitRepositoriesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGitRepositories indicates an expected call of ListGitRepositories.
func (mr *MockGitBeamRepositoryServiceServerMockRecorder) ListGitRepositories(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGitRepositories", reflect.TypeOf((*MockGitBeamRepositoryServiceServer)(nil).ListGitRepositories), arg0, arg1)
}
