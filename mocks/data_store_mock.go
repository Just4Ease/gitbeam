// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "gitbeam/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDataStore is a mock of DataStore interface.
type MockDataStore struct {
	ctrl     *gomock.Controller
	recorder *MockDataStoreMockRecorder
}

// MockDataStoreMockRecorder is the mock recorder for MockDataStore.
type MockDataStoreMockRecorder struct {
	mock *MockDataStore
}

// NewMockDataStore creates a new mock instance.
func NewMockDataStore(ctrl *gomock.Controller) *MockDataStore {
	mock := &MockDataStore{ctrl: ctrl}
	mock.recorder = &MockDataStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataStore) EXPECT() *MockDataStoreMockRecorder {
	return m.recorder
}

// GetCommitById mocks base method.
func (m *MockDataStore) GetCommitById(ctx context.Context, id string) (*models.Commit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommitBySHA", ctx, id)
	ret0, _ := ret[0].(*models.Commit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommitById indicates an expected call of GetCommitById.
func (mr *MockDataStoreMockRecorder) GetCommitById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommitBySHA", reflect.TypeOf((*MockDataStore)(nil).GetCommitById), ctx, id)
}

// ListCommits mocks base method.
func (m *MockDataStore) ListCommits(ctx context.Context) ([]*models.Commit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCommits", ctx)
	ret0, _ := ret[0].([]*models.Commit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCommits indicates an expected call of ListCommits.
func (mr *MockDataStoreMockRecorder) ListCommits(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCommits", reflect.TypeOf((*MockDataStore)(nil).ListCommits), ctx)
}

// ListRepos mocks base method.
func (m *MockDataStore) ListRepos(arg0 context.Context) ([]*models.Repo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRepos", arg0)
	ret0, _ := ret[0].([]*models.Repo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRepos indicates an expected call of ListRepos.
func (mr *MockDataStoreMockRecorder) ListRepos(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepos", reflect.TypeOf((*MockDataStore)(nil).ListRepos), arg0)
}

// SaveCommit mocks base method.
func (m *MockDataStore) SaveCommit(ctx context.Context, payload *models.Commit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCommit", ctx, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveCommit indicates an expected call of SaveCommit.
func (mr *MockDataStoreMockRecorder) SaveCommit(ctx, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCommit", reflect.TypeOf((*MockDataStore)(nil).SaveCommit), ctx, payload)
}

// StoreRepository mocks base method.
func (m *MockDataStore) StoreRepository(ctx context.Context, payload *models.Repo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreRepository", ctx, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreRepository indicates an expected call of StoreRepository.
func (mr *MockDataStoreMockRecorder) StoreRepository(ctx, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreRepository", reflect.TypeOf((*MockDataStore)(nil).StoreRepository), ctx, payload)
}
