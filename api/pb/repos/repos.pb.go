// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v3.21.12
// source: repos/repos.proto

package gitRepos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Define the Repo message
type Repo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeCreated   string `protobuf:"bytes,1,opt,name=timeCreated,proto3" json:"timeCreated,omitempty"`
	TimeUpdated   string `protobuf:"bytes,2,opt,name=timeUpdated,proto3" json:"timeUpdated,omitempty"`
	Name          string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Owner         string `protobuf:"bytes,4,opt,name=owner,proto3" json:"owner,omitempty"`
	Description   string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Url           string `protobuf:"bytes,6,opt,name=url,proto3" json:"url,omitempty"`
	Language      string `protobuf:"bytes,7,opt,name=language,proto3" json:"language,omitempty"`
	ForkCounts    int64  `protobuf:"varint,8,opt,name=forkCounts,proto3" json:"forkCounts,omitempty"`
	StarCounts    int64  `protobuf:"varint,9,opt,name=starCounts,proto3" json:"starCounts,omitempty"`
	OpenIssues    int64  `protobuf:"varint,10,opt,name=openIssues,proto3" json:"openIssues,omitempty"`
	WatchersCount int64  `protobuf:"varint,11,opt,name=watchersCount,proto3" json:"watchersCount,omitempty"`
	Meta          string `protobuf:"bytes,12,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (x *Repo) Reset() {
	*x = Repo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repos_repos_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Repo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Repo) ProtoMessage() {}

func (x *Repo) ProtoReflect() protoreflect.Message {
	mi := &file_repos_repos_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Repo.ProtoReflect.Descriptor instead.
func (*Repo) Descriptor() ([]byte, []int) {
	return file_repos_repos_proto_rawDescGZIP(), []int{0}
}

func (x *Repo) GetTimeCreated() string {
	if x != nil {
		return x.TimeCreated
	}
	return ""
}

func (x *Repo) GetTimeUpdated() string {
	if x != nil {
		return x.TimeUpdated
	}
	return ""
}

func (x *Repo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Repo) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *Repo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Repo) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Repo) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *Repo) GetForkCounts() int64 {
	if x != nil {
		return x.ForkCounts
	}
	return 0
}

func (x *Repo) GetStarCounts() int64 {
	if x != nil {
		return x.StarCounts
	}
	return 0
}

func (x *Repo) GetOpenIssues() int64 {
	if x != nil {
		return x.OpenIssues
	}
	return 0
}

func (x *Repo) GetWatchersCount() int64 {
	if x != nil {
		return x.WatchersCount
	}
	return 0
}

func (x *Repo) GetMeta() string {
	if x != nil {
		return x.Meta
	}
	return ""
}

type Void struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Void) Reset() {
	*x = Void{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repos_repos_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Void) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Void) ProtoMessage() {}

func (x *Void) ProtoReflect() protoreflect.Message {
	mi := &file_repos_repos_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Void.ProtoReflect.Descriptor instead.
func (*Void) Descriptor() ([]byte, []int) {
	return file_repos_repos_proto_rawDescGZIP(), []int{1}
}

// Response message for listGitRepositories
type ListGitRepositoriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repos []*Repo `protobuf:"bytes,1,rep,name=repos,proto3" json:"repos,omitempty"`
}

func (x *ListGitRepositoriesResponse) Reset() {
	*x = ListGitRepositoriesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repos_repos_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGitRepositoriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGitRepositoriesResponse) ProtoMessage() {}

func (x *ListGitRepositoriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_repos_repos_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGitRepositoriesResponse.ProtoReflect.Descriptor instead.
func (*ListGitRepositoriesResponse) Descriptor() ([]byte, []int) {
	return file_repos_repos_proto_rawDescGZIP(), []int{2}
}

func (x *ListGitRepositoriesResponse) GetRepos() []*Repo {
	if x != nil {
		return x.Repos
	}
	return nil
}

// Request message for getGitRepo
type GetGitRepoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerName string `protobuf:"bytes,1,opt,name=ownerName,proto3" json:"ownerName,omitempty"`
	RepoName  string `protobuf:"bytes,2,opt,name=repoName,proto3" json:"repoName,omitempty"`
}

func (x *GetGitRepoRequest) Reset() {
	*x = GetGitRepoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repos_repos_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGitRepoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGitRepoRequest) ProtoMessage() {}

func (x *GetGitRepoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_repos_repos_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGitRepoRequest.ProtoReflect.Descriptor instead.
func (*GetGitRepoRequest) Descriptor() ([]byte, []int) {
	return file_repos_repos_proto_rawDescGZIP(), []int{3}
}

func (x *GetGitRepoRequest) GetOwnerName() string {
	if x != nil {
		return x.OwnerName
	}
	return ""
}

func (x *GetGitRepoRequest) GetRepoName() string {
	if x != nil {
		return x.RepoName
	}
	return ""
}

type HealthCheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *HealthCheckResponse) Reset() {
	*x = HealthCheckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repos_repos_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckResponse) ProtoMessage() {}

func (x *HealthCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_repos_repos_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckResponse.ProtoReflect.Descriptor instead.
func (*HealthCheckResponse) Descriptor() ([]byte, []int) {
	return file_repos_repos_proto_rawDescGZIP(), []int{4}
}

func (x *HealthCheckResponse) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

var File_repos_repos_proto protoreflect.FileDescriptor

var file_repos_repos_proto_rawDesc = []byte{
	0x0a, 0x11, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x08, 0x67, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x22, 0xde, 0x02,
	0x0a, 0x04, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x69, 0x6d,
	0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74,
	0x69, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x6b, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x77, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x22, 0x06,
	0x0a, 0x04, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x43, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x69,
	0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x67, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x2e,
	0x52, 0x65, 0x70, 0x6f, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x22, 0x4d, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x47, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x29, 0x0a, 0x13, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0xe7, 0x01, 0x0a, 0x18, 0x47, 0x69, 0x74, 0x42, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x4e, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x69, 0x74, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x0e, 0x2e, 0x67, 0x69, 0x74, 0x52,
	0x65, 0x70, 0x6f, 0x73, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x1a, 0x25, 0x2e, 0x67, 0x69, 0x74, 0x52,
	0x65, 0x70, 0x6f, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x3b, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x47, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f,
	0x12, 0x1b, 0x2e, 0x67, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x47,
	0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e,
	0x67, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x22, 0x00, 0x12,
	0x3e, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x0e,
	0x2e, 0x67, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x1a, 0x1d,
	0x2e, 0x67, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42,
	0x0c, 0x5a, 0x0a, 0x2e, 0x3b, 0x67, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_repos_repos_proto_rawDescOnce sync.Once
	file_repos_repos_proto_rawDescData = file_repos_repos_proto_rawDesc
)

func file_repos_repos_proto_rawDescGZIP() []byte {
	file_repos_repos_proto_rawDescOnce.Do(func() {
		file_repos_repos_proto_rawDescData = protoimpl.X.CompressGZIP(file_repos_repos_proto_rawDescData)
	})
	return file_repos_repos_proto_rawDescData
}

var file_repos_repos_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_repos_repos_proto_goTypes = []interface{}{
	(*Repo)(nil),                        // 0: gitRepos.Repo
	(*Void)(nil),                        // 1: gitRepos.Void
	(*ListGitRepositoriesResponse)(nil), // 2: gitRepos.ListGitRepositoriesResponse
	(*GetGitRepoRequest)(nil),           // 3: gitRepos.GetGitRepoRequest
	(*HealthCheckResponse)(nil),         // 4: gitRepos.HealthCheckResponse
}
var file_repos_repos_proto_depIdxs = []int32{
	0, // 0: gitRepos.ListGitRepositoriesResponse.repos:type_name -> gitRepos.Repo
	1, // 1: gitRepos.GitBeamRepositoryService.ListGitRepositories:input_type -> gitRepos.Void
	3, // 2: gitRepos.GitBeamRepositoryService.GetGitRepo:input_type -> gitRepos.GetGitRepoRequest
	1, // 3: gitRepos.GitBeamRepositoryService.HealthCheck:input_type -> gitRepos.Void
	2, // 4: gitRepos.GitBeamRepositoryService.ListGitRepositories:output_type -> gitRepos.ListGitRepositoriesResponse
	0, // 5: gitRepos.GitBeamRepositoryService.GetGitRepo:output_type -> gitRepos.Repo
	4, // 6: gitRepos.GitBeamRepositoryService.HealthCheck:output_type -> gitRepos.HealthCheckResponse
	4, // [4:7] is the sub-list for method output_type
	1, // [1:4] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_repos_repos_proto_init() }
func file_repos_repos_proto_init() {
	if File_repos_repos_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_repos_repos_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Repo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_repos_repos_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Void); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_repos_repos_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGitRepositoriesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_repos_repos_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGitRepoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_repos_repos_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthCheckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_repos_repos_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_repos_repos_proto_goTypes,
		DependencyIndexes: file_repos_repos_proto_depIdxs,
		MessageInfos:      file_repos_repos_proto_msgTypes,
	}.Build()
	File_repos_repos_proto = out.File
	file_repos_repos_proto_rawDesc = nil
	file_repos_repos_proto_goTypes = nil
	file_repos_repos_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GitBeamRepositoryServiceClient is the client API for GitBeamRepositoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GitBeamRepositoryServiceClient interface {
	ListGitRepositories(ctx context.Context, in *Void, opts ...grpc.CallOption) (*ListGitRepositoriesResponse, error)
	GetGitRepo(ctx context.Context, in *GetGitRepoRequest, opts ...grpc.CallOption) (*Repo, error)
	HealthCheck(ctx context.Context, in *Void, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type gitBeamRepositoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGitBeamRepositoryServiceClient(cc grpc.ClientConnInterface) GitBeamRepositoryServiceClient {
	return &gitBeamRepositoryServiceClient{cc}
}

func (c *gitBeamRepositoryServiceClient) ListGitRepositories(ctx context.Context, in *Void, opts ...grpc.CallOption) (*ListGitRepositoriesResponse, error) {
	out := new(ListGitRepositoriesResponse)
	err := c.cc.Invoke(ctx, "/gitRepos.GitBeamRepositoryService/ListGitRepositories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitBeamRepositoryServiceClient) GetGitRepo(ctx context.Context, in *GetGitRepoRequest, opts ...grpc.CallOption) (*Repo, error) {
	out := new(Repo)
	err := c.cc.Invoke(ctx, "/gitRepos.GitBeamRepositoryService/GetGitRepo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitBeamRepositoryServiceClient) HealthCheck(ctx context.Context, in *Void, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, "/gitRepos.GitBeamRepositoryService/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GitBeamRepositoryServiceServer is the server API for GitBeamRepositoryService service.
type GitBeamRepositoryServiceServer interface {
	ListGitRepositories(context.Context, *Void) (*ListGitRepositoriesResponse, error)
	GetGitRepo(context.Context, *GetGitRepoRequest) (*Repo, error)
	HealthCheck(context.Context, *Void) (*HealthCheckResponse, error)
}

// UnimplementedGitBeamRepositoryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGitBeamRepositoryServiceServer struct {
}

func (*UnimplementedGitBeamRepositoryServiceServer) ListGitRepositories(context.Context, *Void) (*ListGitRepositoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGitRepositories not implemented")
}
func (*UnimplementedGitBeamRepositoryServiceServer) GetGitRepo(context.Context, *GetGitRepoRequest) (*Repo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGitRepo not implemented")
}
func (*UnimplementedGitBeamRepositoryServiceServer) HealthCheck(context.Context, *Void) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}

func RegisterGitBeamRepositoryServiceServer(s *grpc.Server, srv GitBeamRepositoryServiceServer) {
	s.RegisterService(&_GitBeamRepositoryService_serviceDesc, srv)
}

func _GitBeamRepositoryService_ListGitRepositories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitBeamRepositoryServiceServer).ListGitRepositories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitRepos.GitBeamRepositoryService/ListGitRepositories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitBeamRepositoryServiceServer).ListGitRepositories(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitBeamRepositoryService_GetGitRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGitRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitBeamRepositoryServiceServer).GetGitRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitRepos.GitBeamRepositoryService/GetGitRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitBeamRepositoryServiceServer).GetGitRepo(ctx, req.(*GetGitRepoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitBeamRepositoryService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitBeamRepositoryServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitRepos.GitBeamRepositoryService/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitBeamRepositoryServiceServer).HealthCheck(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

var _GitBeamRepositoryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gitRepos.GitBeamRepositoryService",
	HandlerType: (*GitBeamRepositoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListGitRepositories",
			Handler:    _GitBeamRepositoryService_ListGitRepositories_Handler,
		},
		{
			MethodName: "GetGitRepo",
			Handler:    _GitBeamRepositoryService_GetGitRepo_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _GitBeamRepositoryService_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "repos/repos.proto",
}
