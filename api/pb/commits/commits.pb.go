// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v3.21.12
// source: commits/commits.proto

package commits

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Void struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Void) Reset() {
	*x = Void{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commits_commits_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Void) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Void) ProtoMessage() {}

func (x *Void) ProtoReflect() protoreflect.Message {
	mi := &file_commits_commits_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Void.ProtoReflect.Descriptor instead.
func (*Void) Descriptor() ([]byte, []int) {
	return file_commits_commits_proto_rawDescGZIP(), []int{0}
}

// Define the Repo message
type Commit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date            string   `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	Message         string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Author          string   `protobuf:"bytes,3,opt,name=author,proto3" json:"author,omitempty"`
	RepoName        string   `protobuf:"bytes,4,opt,name=repoName,proto3" json:"repoName,omitempty"`
	OwnerName       string   `protobuf:"bytes,5,opt,name=ownerName,proto3" json:"ownerName,omitempty"`
	Url             string   `protobuf:"bytes,6,opt,name=url,proto3" json:"url,omitempty"`
	Sha             string   `protobuf:"bytes,7,opt,name=sha,proto3" json:"sha,omitempty"`
	ParentCommitIDs []string `protobuf:"bytes,8,rep,name=parentCommitIDs,proto3" json:"parentCommitIDs,omitempty"`
	Meta            string   `protobuf:"bytes,9,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (x *Commit) Reset() {
	*x = Commit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commits_commits_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Commit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Commit) ProtoMessage() {}

func (x *Commit) ProtoReflect() protoreflect.Message {
	mi := &file_commits_commits_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Commit.ProtoReflect.Descriptor instead.
func (*Commit) Descriptor() ([]byte, []int) {
	return file_commits_commits_proto_rawDescGZIP(), []int{1}
}

func (x *Commit) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *Commit) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Commit) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *Commit) GetRepoName() string {
	if x != nil {
		return x.RepoName
	}
	return ""
}

func (x *Commit) GetOwnerName() string {
	if x != nil {
		return x.OwnerName
	}
	return ""
}

func (x *Commit) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Commit) GetSha() string {
	if x != nil {
		return x.Sha
	}
	return ""
}

func (x *Commit) GetParentCommitIDs() []string {
	if x != nil {
		return x.ParentCommitIDs
	}
	return nil
}

func (x *Commit) GetMeta() string {
	if x != nil {
		return x.Meta
	}
	return ""
}

type TopCommitAuthor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Author       string `protobuf:"bytes,1,opt,name=author,proto3" json:"author,omitempty"`
	CommitsCount int64  `protobuf:"varint,2,opt,name=commitsCount,proto3" json:"commitsCount,omitempty"`
}

func (x *TopCommitAuthor) Reset() {
	*x = TopCommitAuthor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commits_commits_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopCommitAuthor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopCommitAuthor) ProtoMessage() {}

func (x *TopCommitAuthor) ProtoReflect() protoreflect.Message {
	mi := &file_commits_commits_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopCommitAuthor.ProtoReflect.Descriptor instead.
func (*TopCommitAuthor) Descriptor() ([]byte, []int) {
	return file_commits_commits_proto_rawDescGZIP(), []int{2}
}

func (x *TopCommitAuthor) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *TopCommitAuthor) GetCommitsCount() int64 {
	if x != nil {
		return x.CommitsCount
	}
	return 0
}

type CommitFilterParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page      int64  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Limit     int64  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	OwnerName string `protobuf:"bytes,3,opt,name=owner_name,json=ownerName,proto3" json:"owner_name,omitempty"`
	RepoName  string `protobuf:"bytes,4,opt,name=repo_name,json=repoName,proto3" json:"repo_name,omitempty"`
	FromDate  string `protobuf:"bytes,5,opt,name=fromDate,proto3" json:"fromDate,omitempty"`
	ToDate    string `protobuf:"bytes,6,opt,name=toDate,proto3" json:"toDate,omitempty"`
}

func (x *CommitFilterParams) Reset() {
	*x = CommitFilterParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commits_commits_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitFilterParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitFilterParams) ProtoMessage() {}

func (x *CommitFilterParams) ProtoReflect() protoreflect.Message {
	mi := &file_commits_commits_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitFilterParams.ProtoReflect.Descriptor instead.
func (*CommitFilterParams) Descriptor() ([]byte, []int) {
	return file_commits_commits_proto_rawDescGZIP(), []int{3}
}

func (x *CommitFilterParams) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *CommitFilterParams) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *CommitFilterParams) GetOwnerName() string {
	if x != nil {
		return x.OwnerName
	}
	return ""
}

func (x *CommitFilterParams) GetRepoName() string {
	if x != nil {
		return x.RepoName
	}
	return ""
}

func (x *CommitFilterParams) GetFromDate() string {
	if x != nil {
		return x.FromDate
	}
	return ""
}

func (x *CommitFilterParams) GetToDate() string {
	if x != nil {
		return x.ToDate
	}
	return ""
}

type CommitByOwnerAndShaParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerName string `protobuf:"bytes,1,opt,name=ownerName,proto3" json:"ownerName,omitempty"`
	RepoName  string `protobuf:"bytes,2,opt,name=repoName,proto3" json:"repoName,omitempty"`
	Sha       string `protobuf:"bytes,3,opt,name=sha,proto3" json:"sha,omitempty"`
}

func (x *CommitByOwnerAndShaParams) Reset() {
	*x = CommitByOwnerAndShaParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commits_commits_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitByOwnerAndShaParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitByOwnerAndShaParams) ProtoMessage() {}

func (x *CommitByOwnerAndShaParams) ProtoReflect() protoreflect.Message {
	mi := &file_commits_commits_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitByOwnerAndShaParams.ProtoReflect.Descriptor instead.
func (*CommitByOwnerAndShaParams) Descriptor() ([]byte, []int) {
	return file_commits_commits_proto_rawDescGZIP(), []int{4}
}

func (x *CommitByOwnerAndShaParams) GetOwnerName() string {
	if x != nil {
		return x.OwnerName
	}
	return ""
}

func (x *CommitByOwnerAndShaParams) GetRepoName() string {
	if x != nil {
		return x.RepoName
	}
	return ""
}

func (x *CommitByOwnerAndShaParams) GetSha() string {
	if x != nil {
		return x.Sha
	}
	return ""
}

type HealthCheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *HealthCheckResponse) Reset() {
	*x = HealthCheckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commits_commits_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckResponse) ProtoMessage() {}

func (x *HealthCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commits_commits_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckResponse.ProtoReflect.Descriptor instead.
func (*HealthCheckResponse) Descriptor() ([]byte, []int) {
	return file_commits_commits_proto_rawDescGZIP(), []int{5}
}

func (x *HealthCheckResponse) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

type ListCommitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*Commit `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ListCommitResponse) Reset() {
	*x = ListCommitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commits_commits_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCommitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCommitResponse) ProtoMessage() {}

func (x *ListCommitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commits_commits_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCommitResponse.ProtoReflect.Descriptor instead.
func (*ListCommitResponse) Descriptor() ([]byte, []int) {
	return file_commits_commits_proto_rawDescGZIP(), []int{6}
}

func (x *ListCommitResponse) GetData() []*Commit {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListTopCommitAuthorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*TopCommitAuthor `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ListTopCommitAuthorResponse) Reset() {
	*x = ListTopCommitAuthorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commits_commits_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTopCommitAuthorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTopCommitAuthorResponse) ProtoMessage() {}

func (x *ListTopCommitAuthorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commits_commits_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTopCommitAuthorResponse.ProtoReflect.Descriptor instead.
func (*ListTopCommitAuthorResponse) Descriptor() ([]byte, []int) {
	return file_commits_commits_proto_rawDescGZIP(), []int{7}
}

func (x *ListTopCommitAuthorResponse) GetData() []*TopCommitAuthor {
	if x != nil {
		return x.Data
	}
	return nil
}

type MonitorRepositoryCommitsConfigParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerName       string `protobuf:"bytes,1,opt,name=ownerName,proto3" json:"ownerName,omitempty"`
	RepoName        string `protobuf:"bytes,2,opt,name=repoName,proto3" json:"repoName,omitempty"`
	FromDate        string `protobuf:"bytes,3,opt,name=fromDate,proto3" json:"fromDate,omitempty"`
	ToDate          string `protobuf:"bytes,4,opt,name=toDate,proto3" json:"toDate,omitempty"`
	DurationInHours int64  `protobuf:"varint,5,opt,name=durationInHours,proto3" json:"durationInHours,omitempty"`
}

func (x *MonitorRepositoryCommitsConfigParams) Reset() {
	*x = MonitorRepositoryCommitsConfigParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commits_commits_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonitorRepositoryCommitsConfigParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitorRepositoryCommitsConfigParams) ProtoMessage() {}

func (x *MonitorRepositoryCommitsConfigParams) ProtoReflect() protoreflect.Message {
	mi := &file_commits_commits_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitorRepositoryCommitsConfigParams.ProtoReflect.Descriptor instead.
func (*MonitorRepositoryCommitsConfigParams) Descriptor() ([]byte, []int) {
	return file_commits_commits_proto_rawDescGZIP(), []int{8}
}

func (x *MonitorRepositoryCommitsConfigParams) GetOwnerName() string {
	if x != nil {
		return x.OwnerName
	}
	return ""
}

func (x *MonitorRepositoryCommitsConfigParams) GetRepoName() string {
	if x != nil {
		return x.RepoName
	}
	return ""
}

func (x *MonitorRepositoryCommitsConfigParams) GetFromDate() string {
	if x != nil {
		return x.FromDate
	}
	return ""
}

func (x *MonitorRepositoryCommitsConfigParams) GetToDate() string {
	if x != nil {
		return x.ToDate
	}
	return ""
}

func (x *MonitorRepositoryCommitsConfigParams) GetDurationInHours() int64 {
	if x != nil {
		return x.DurationInHours
	}
	return 0
}

type StopMonitoringRepositoryCommitParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerName string `protobuf:"bytes,1,opt,name=ownerName,proto3" json:"ownerName,omitempty"`
	RepoName  string `protobuf:"bytes,2,opt,name=repoName,proto3" json:"repoName,omitempty"`
}

func (x *StopMonitoringRepositoryCommitParams) Reset() {
	*x = StopMonitoringRepositoryCommitParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commits_commits_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopMonitoringRepositoryCommitParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopMonitoringRepositoryCommitParams) ProtoMessage() {}

func (x *StopMonitoringRepositoryCommitParams) ProtoReflect() protoreflect.Message {
	mi := &file_commits_commits_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopMonitoringRepositoryCommitParams.ProtoReflect.Descriptor instead.
func (*StopMonitoringRepositoryCommitParams) Descriptor() ([]byte, []int) {
	return file_commits_commits_proto_rawDescGZIP(), []int{9}
}

func (x *StopMonitoringRepositoryCommitParams) GetOwnerName() string {
	if x != nil {
		return x.OwnerName
	}
	return ""
}

func (x *StopMonitoringRepositoryCommitParams) GetRepoName() string {
	if x != nil {
		return x.RepoName
	}
	return ""
}

var File_commits_commits_proto protoreflect.FileDescriptor

var file_commits_commits_proto_rawDesc = []byte{
	0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73,
	0x22, 0x06, 0x0a, 0x04, 0x56, 0x6f, 0x69, 0x64, 0x22, 0xea, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70,
	0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70,
	0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x68, 0x61, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x73, 0x68, 0x61, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x44, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x44,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6d, 0x65, 0x74, 0x61, 0x22, 0x4d, 0x0a, 0x0f, 0x54, 0x6f, 0x70, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0xae, 0x01, 0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x6f, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74,
	0x6f, 0x44, 0x61, 0x74, 0x65, 0x22, 0x67, 0x0a, 0x19, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x42,
	0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x53, 0x68, 0x61, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x73, 0x68, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x68, 0x61, 0x22, 0x29,
	0x0a, 0x13, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x39, 0x0a, 0x12, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x23, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x4b, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x70, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x2e, 0x54, 0x6f, 0x70, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0xbe, 0x01, 0x0a, 0x24, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x6f, 0x44, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x48, 0x6f, 0x75,
	0x72, 0x73, 0x22, 0x60, 0x0a, 0x24, 0x53, 0x74, 0x6f, 0x70, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f,
	0x4e, 0x61, 0x6d, 0x65, 0x32, 0x94, 0x04, 0x0a, 0x15, 0x47, 0x69, 0x74, 0x42, 0x65, 0x61, 0x6d,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x49,
	0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x1b, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x1b, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x42, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x6e, 0x64,
	0x53, 0x48, 0x41, 0x12, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x42, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x53, 0x68,
	0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x13, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x6f, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x12, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x24,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x70,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x2e,
	0x56, 0x6f, 0x69, 0x64, 0x1a, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x2e, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x20, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x73, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x73, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x1f, 0x53, 0x74, 0x6f, 0x70,
	0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x2d, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x73, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x42, 0x0b, 0x5a, 0x09, 0x2e,
	0x3b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_commits_commits_proto_rawDescOnce sync.Once
	file_commits_commits_proto_rawDescData = file_commits_commits_proto_rawDesc
)

func file_commits_commits_proto_rawDescGZIP() []byte {
	file_commits_commits_proto_rawDescOnce.Do(func() {
		file_commits_commits_proto_rawDescData = protoimpl.X.CompressGZIP(file_commits_commits_proto_rawDescData)
	})
	return file_commits_commits_proto_rawDescData
}

var file_commits_commits_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_commits_commits_proto_goTypes = []interface{}{
	(*Void)(nil),                                 // 0: commits.Void
	(*Commit)(nil),                               // 1: commits.Commit
	(*TopCommitAuthor)(nil),                      // 2: commits.TopCommitAuthor
	(*CommitFilterParams)(nil),                   // 3: commits.CommitFilterParams
	(*CommitByOwnerAndShaParams)(nil),            // 4: commits.CommitByOwnerAndShaParams
	(*HealthCheckResponse)(nil),                  // 5: commits.HealthCheckResponse
	(*ListCommitResponse)(nil),                   // 6: commits.ListCommitResponse
	(*ListTopCommitAuthorResponse)(nil),          // 7: commits.ListTopCommitAuthorResponse
	(*MonitorRepositoryCommitsConfigParams)(nil), // 8: commits.MonitorRepositoryCommitsConfigParams
	(*StopMonitoringRepositoryCommitParams)(nil), // 9: commits.StopMonitoringRepositoryCommitParams
}
var file_commits_commits_proto_depIdxs = []int32{
	1, // 0: commits.ListCommitResponse.data:type_name -> commits.Commit
	2, // 1: commits.ListTopCommitAuthorResponse.data:type_name -> commits.TopCommitAuthor
	3, // 2: commits.GitBeamCommitsService.ListCommits:input_type -> commits.CommitFilterParams
	4, // 3: commits.GitBeamCommitsService.GetCommitByOwnerAndSHA:input_type -> commits.CommitByOwnerAndShaParams
	3, // 4: commits.GitBeamCommitsService.ListTopCommitAuthor:input_type -> commits.CommitFilterParams
	0, // 5: commits.GitBeamCommitsService.HealthCheck:input_type -> commits.Void
	8, // 6: commits.GitBeamCommitsService.StartMonitoringRepositoryCommits:input_type -> commits.MonitorRepositoryCommitsConfigParams
	9, // 7: commits.GitBeamCommitsService.StopMonitoringRepositoryCommits:input_type -> commits.StopMonitoringRepositoryCommitParams
	6, // 8: commits.GitBeamCommitsService.ListCommits:output_type -> commits.ListCommitResponse
	1, // 9: commits.GitBeamCommitsService.GetCommitByOwnerAndSHA:output_type -> commits.Commit
	7, // 10: commits.GitBeamCommitsService.ListTopCommitAuthor:output_type -> commits.ListTopCommitAuthorResponse
	5, // 11: commits.GitBeamCommitsService.HealthCheck:output_type -> commits.HealthCheckResponse
	0, // 12: commits.GitBeamCommitsService.StartMonitoringRepositoryCommits:output_type -> commits.Void
	0, // 13: commits.GitBeamCommitsService.StopMonitoringRepositoryCommits:output_type -> commits.Void
	8, // [8:14] is the sub-list for method output_type
	2, // [2:8] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_commits_commits_proto_init() }
func file_commits_commits_proto_init() {
	if File_commits_commits_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_commits_commits_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Void); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commits_commits_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Commit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commits_commits_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopCommitAuthor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commits_commits_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitFilterParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commits_commits_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitByOwnerAndShaParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commits_commits_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthCheckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commits_commits_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCommitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commits_commits_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTopCommitAuthorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commits_commits_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonitorRepositoryCommitsConfigParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commits_commits_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopMonitoringRepositoryCommitParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_commits_commits_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_commits_commits_proto_goTypes,
		DependencyIndexes: file_commits_commits_proto_depIdxs,
		MessageInfos:      file_commits_commits_proto_msgTypes,
	}.Build()
	File_commits_commits_proto = out.File
	file_commits_commits_proto_rawDesc = nil
	file_commits_commits_proto_goTypes = nil
	file_commits_commits_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GitBeamCommitsServiceClient is the client API for GitBeamCommitsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GitBeamCommitsServiceClient interface {
	ListCommits(ctx context.Context, in *CommitFilterParams, opts ...grpc.CallOption) (*ListCommitResponse, error)
	GetCommitByOwnerAndSHA(ctx context.Context, in *CommitByOwnerAndShaParams, opts ...grpc.CallOption) (*Commit, error)
	ListTopCommitAuthor(ctx context.Context, in *CommitFilterParams, opts ...grpc.CallOption) (*ListTopCommitAuthorResponse, error)
	HealthCheck(ctx context.Context, in *Void, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	StartMonitoringRepositoryCommits(ctx context.Context, in *MonitorRepositoryCommitsConfigParams, opts ...grpc.CallOption) (*Void, error)
	StopMonitoringRepositoryCommits(ctx context.Context, in *StopMonitoringRepositoryCommitParams, opts ...grpc.CallOption) (*Void, error)
}

type gitBeamCommitsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGitBeamCommitsServiceClient(cc grpc.ClientConnInterface) GitBeamCommitsServiceClient {
	return &gitBeamCommitsServiceClient{cc}
}

func (c *gitBeamCommitsServiceClient) ListCommits(ctx context.Context, in *CommitFilterParams, opts ...grpc.CallOption) (*ListCommitResponse, error) {
	out := new(ListCommitResponse)
	err := c.cc.Invoke(ctx, "/commits.GitBeamCommitsService/ListCommits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitBeamCommitsServiceClient) GetCommitByOwnerAndSHA(ctx context.Context, in *CommitByOwnerAndShaParams, opts ...grpc.CallOption) (*Commit, error) {
	out := new(Commit)
	err := c.cc.Invoke(ctx, "/commits.GitBeamCommitsService/GetCommitByOwnerAndSHA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitBeamCommitsServiceClient) ListTopCommitAuthor(ctx context.Context, in *CommitFilterParams, opts ...grpc.CallOption) (*ListTopCommitAuthorResponse, error) {
	out := new(ListTopCommitAuthorResponse)
	err := c.cc.Invoke(ctx, "/commits.GitBeamCommitsService/ListTopCommitAuthor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitBeamCommitsServiceClient) HealthCheck(ctx context.Context, in *Void, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, "/commits.GitBeamCommitsService/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitBeamCommitsServiceClient) StartMonitoringRepositoryCommits(ctx context.Context, in *MonitorRepositoryCommitsConfigParams, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/commits.GitBeamCommitsService/StartMonitoringRepositoryCommits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitBeamCommitsServiceClient) StopMonitoringRepositoryCommits(ctx context.Context, in *StopMonitoringRepositoryCommitParams, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/commits.GitBeamCommitsService/StopMonitoringRepositoryCommits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GitBeamCommitsServiceServer is the server API for GitBeamCommitsService service.
type GitBeamCommitsServiceServer interface {
	ListCommits(context.Context, *CommitFilterParams) (*ListCommitResponse, error)
	GetCommitByOwnerAndSHA(context.Context, *CommitByOwnerAndShaParams) (*Commit, error)
	ListTopCommitAuthor(context.Context, *CommitFilterParams) (*ListTopCommitAuthorResponse, error)
	HealthCheck(context.Context, *Void) (*HealthCheckResponse, error)
	StartMonitoringRepositoryCommits(context.Context, *MonitorRepositoryCommitsConfigParams) (*Void, error)
	StopMonitoringRepositoryCommits(context.Context, *StopMonitoringRepositoryCommitParams) (*Void, error)
}

// UnimplementedGitBeamCommitsServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGitBeamCommitsServiceServer struct {
}

func (*UnimplementedGitBeamCommitsServiceServer) ListCommits(context.Context, *CommitFilterParams) (*ListCommitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCommits not implemented")
}
func (*UnimplementedGitBeamCommitsServiceServer) GetCommitByOwnerAndSHA(context.Context, *CommitByOwnerAndShaParams) (*Commit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommitByOwnerAndSHA not implemented")
}
func (*UnimplementedGitBeamCommitsServiceServer) ListTopCommitAuthor(context.Context, *CommitFilterParams) (*ListTopCommitAuthorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTopCommitAuthor not implemented")
}
func (*UnimplementedGitBeamCommitsServiceServer) HealthCheck(context.Context, *Void) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (*UnimplementedGitBeamCommitsServiceServer) StartMonitoringRepositoryCommits(context.Context, *MonitorRepositoryCommitsConfigParams) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartMonitoringRepositoryCommits not implemented")
}
func (*UnimplementedGitBeamCommitsServiceServer) StopMonitoringRepositoryCommits(context.Context, *StopMonitoringRepositoryCommitParams) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopMonitoringRepositoryCommits not implemented")
}

func RegisterGitBeamCommitsServiceServer(s *grpc.Server, srv GitBeamCommitsServiceServer) {
	s.RegisterService(&_GitBeamCommitsService_serviceDesc, srv)
}

func _GitBeamCommitsService_ListCommits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitFilterParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitBeamCommitsServiceServer).ListCommits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commits.GitBeamCommitsService/ListCommits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitBeamCommitsServiceServer).ListCommits(ctx, req.(*CommitFilterParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitBeamCommitsService_GetCommitByOwnerAndSHA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitByOwnerAndShaParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitBeamCommitsServiceServer).GetCommitByOwnerAndSHA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commits.GitBeamCommitsService/GetCommitByOwnerAndSHA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitBeamCommitsServiceServer).GetCommitByOwnerAndSHA(ctx, req.(*CommitByOwnerAndShaParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitBeamCommitsService_ListTopCommitAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitFilterParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitBeamCommitsServiceServer).ListTopCommitAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commits.GitBeamCommitsService/ListTopCommitAuthor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitBeamCommitsServiceServer).ListTopCommitAuthor(ctx, req.(*CommitFilterParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitBeamCommitsService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitBeamCommitsServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commits.GitBeamCommitsService/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitBeamCommitsServiceServer).HealthCheck(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitBeamCommitsService_StartMonitoringRepositoryCommits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MonitorRepositoryCommitsConfigParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitBeamCommitsServiceServer).StartMonitoringRepositoryCommits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commits.GitBeamCommitsService/StartMonitoringRepositoryCommits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitBeamCommitsServiceServer).StartMonitoringRepositoryCommits(ctx, req.(*MonitorRepositoryCommitsConfigParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitBeamCommitsService_StopMonitoringRepositoryCommits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopMonitoringRepositoryCommitParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitBeamCommitsServiceServer).StopMonitoringRepositoryCommits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commits.GitBeamCommitsService/StopMonitoringRepositoryCommits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitBeamCommitsServiceServer).StopMonitoringRepositoryCommits(ctx, req.(*StopMonitoringRepositoryCommitParams))
	}
	return interceptor(ctx, in, info, handler)
}

var _GitBeamCommitsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "commits.GitBeamCommitsService",
	HandlerType: (*GitBeamCommitsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCommits",
			Handler:    _GitBeamCommitsService_ListCommits_Handler,
		},
		{
			MethodName: "GetCommitByOwnerAndSHA",
			Handler:    _GitBeamCommitsService_GetCommitByOwnerAndSHA_Handler,
		},
		{
			MethodName: "ListTopCommitAuthor",
			Handler:    _GitBeamCommitsService_ListTopCommitAuthor_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _GitBeamCommitsService_HealthCheck_Handler,
		},
		{
			MethodName: "StartMonitoringRepositoryCommits",
			Handler:    _GitBeamCommitsService_StartMonitoringRepositoryCommits_Handler,
		},
		{
			MethodName: "StopMonitoringRepositoryCommits",
			Handler:    _GitBeamCommitsService_StopMonitoringRepositoryCommits_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "commits/commits.proto",
}
